name: 🔧 Repository Maintenance

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - cleanup-only
          - update-deps
          - security-audit

permissions:
  contents: write
  pull-requests: write
  issues: write
  security-events: write

env:
  GO_VERSION: '1.23.4'

jobs:
  # Dependency updates
  dependency-updates:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event.inputs.maintenance_type != 'cleanup-only'
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 📦 Update Go dependencies
        run: |
          echo "📦 Updating Go dependencies..."
          if [ -f "go.mod" ]; then
            go get -u ./...
            go mod tidy
            echo "✅ Go dependencies updated"
          else
            echo "ℹ️ No go.mod found, skipping Go dependency updates"
          fi
      
      - name: 🔍 Check for dependency changes
        id: changes
        run: |
          if git diff --quiet go.mod go.sum 2>/dev/null; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No dependency changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Dependency changes detected"
          fi
      
      - name: 📤 Commit dependency updates
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'Dependency Bot'
          git config --global user.email 'deps-bot@users.noreply.github.com'
          
          git add go.mod go.sum
          git commit -m "📦 Update Go dependencies

          - Updated to latest compatible versions
          - Automated security and compatibility updates
          - Run go mod tidy for cleanup
          
          🤖 Auto-generated by maintenance workflow"
          
          git push origin main
          echo "✅ Dependency updates committed and pushed"

  # Code cleanup and formatting
  code-cleanup:
    name: 🧹 Code Cleanup
    runs-on: ubuntu-latest
    needs: dependency-updates
    if: always() && github.event.inputs.maintenance_type != 'update-deps'
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main  # Get latest changes from dependency updates
          token: ${{ secrets.TOKEN }}
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 🎨 Format Go code
        run: |
          echo "🎨 Formatting Go code..."
          if [ -f "main.go" ]; then
            go fmt ./...
            echo "✅ Go code formatted"
          else
            echo "ℹ️ No Go files found, skipping formatting"
          fi
      
      - name: 🔍 Run go vet
        run: |
          echo "🔍 Running go vet..."
          if [ -f "go.mod" ]; then
            go vet ./...
            echo "✅ go vet passed"
          else
            echo "ℹ️ No go.mod found, skipping go vet"
          fi
      
      - name: 🧹 Clean up old artifacts
        run: |
          echo "🧹 Cleaning up old artifacts..."
          
          # Remove any temporary files
          find . -name "*.tmp" -type f -delete
          find . -name "*.log" -type f -delete
          find . -name ".DS_Store" -type f -delete
          
          # Clean up old backup files
          find . -name "*.backup" -type f -mtime +7 -delete
          find . -name "*.bak" -type f -mtime +7 -delete
          
          echo "✅ Cleanup completed"
      
      - name: 📝 Update documentation timestamps
        run: |
          echo "📝 Updating documentation..."
          
          # Update any documentation with current date
          if [ -f "docs/README.md" ]; then
            sed -i "s/Last updated: .*/Last updated: $(date -u +'%Y-%m-%d')/" docs/README.md
          fi
          
          echo "✅ Documentation updated"
      
      - name: 🔍 Check for cleanup changes
        id: cleanup_changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No cleanup changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "📝 Cleanup changes detected"
          fi
      
      - name: 📤 Commit cleanup changes
        if: steps.cleanup_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'Cleanup Bot'
          git config --global user.email 'cleanup-bot@users.noreply.github.com'
          
          git add -A
          git commit -m "🧹 Automated code cleanup and maintenance

          - Format Go code with go fmt
          - Run go vet for code quality
          - Clean up temporary and old files
          - Update documentation timestamps
          
          🤖 Auto-generated by maintenance workflow"
          
          git push origin main
          echo "✅ Cleanup changes committed and pushed"

  # Security audit
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: [dependency-updates, code-cleanup]
    if: always() && github.event.inputs.maintenance_type != 'cleanup-only'
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 🔒 Run security audit
        run: |
          echo "🔒 Running security audit..."
          
          # Install govulncheck if not already installed
          go install golang.org/x/vuln/cmd/govulncheck@latest
          
          # Run vulnerability check
          if [ -f "go.mod" ]; then
            govulncheck ./... || echo "⚠️ Vulnerabilities detected - check logs"
          fi
          
          echo "✅ Security audit completed"
      
      - name: 🔍 Check for security issues
        run: |
          echo "🔍 Checking for common security issues..."
          
          # Check for hardcoded secrets (basic patterns)
          echo "Checking for potential secrets..."
          if grep -r -i -E "(password|secret|key|token).*=" . --exclude-dir=.git --exclude="*.yml" --exclude="*.yaml" || true; then
            echo "⚠️ Potential secrets detected - manual review recommended"
          fi
          
          # Check file permissions
          echo "Checking file permissions..."
          find . -type f -perm /002 -not -path "./.git/*" | head -10 || true
          
          echo "✅ Security checks completed"

  # Repository health check
  health-check:
    name: 🏥 Repository Health Check
    runs-on: ubuntu-latest
    needs: [dependency-updates, code-cleanup, security-audit]
    if: always()
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: 📊 Repository statistics
        run: |
          echo "📊 Repository Health Report"
          echo "=========================="
          echo "🗓️ Date: $(date -u)"
          echo "📁 Files: $(find . -type f -not -path "./.git/*" | wc -l)"
          echo "📝 Go files: $(find . -name "*.go" -not -path "./.git/*" | wc -l)"
          echo "🔧 Workflows: $(find .github/workflows -name "*.yml" -o -name "*.yaml" | wc -l)"
          echo "📄 Docs: $(find . -name "*.md" -not -path "./.git/*" | wc -l)"
          echo ""
          
          # Check README status
          if [ -f "README.md" ]; then
            echo "✅ README.md present"
            echo "📏 README size: $(wc -l < README.md) lines"
          else
            echo "❌ README.md missing"
          fi
          
          # Check main.go status
          if [ -f "main.go" ]; then
            echo "✅ main.go present"
            echo "📏 Main file size: $(wc -l < main.go) lines"
          else
            echo "❌ main.go missing"
          fi
          
          # Check workflows
          if [ -d ".github/workflows" ]; then
            echo "✅ GitHub workflows configured"
            echo "🔧 Workflow files: $(ls -1 .github/workflows/*.yml 2>/dev/null | wc -l)"
          else
            echo "❌ No GitHub workflows found"
          fi
      
      - name: 🔍 Build test
        run: |
          echo "🔍 Testing build process..."
          if [ -f "main.go" ] && [ -f "go.mod" ]; then
            echo "🏗️ Building application..."
            go build -v ./...
            echo "✅ Build successful"
          else
            echo "ℹ️ Go project not detected, skipping build test"
          fi
      
      - name: 📝 Generate health report
        run: |
          echo "📝 Generating health report..."
          
          cat > MAINTENANCE_REPORT.md << 'EOF'
          # 🏥 Repository Maintenance Report
          
          **Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **Workflow Run**: ${{ github.run_number }}
          
          ## 📊 Health Summary
          
          | Component | Status | Details |
          |-----------|--------|---------|
          | Dependencies | ${{ needs.dependency-updates.result == 'success' && '✅ Updated' || '⚠️ Check required' }} | Go modules and security updates |
          | Code Quality | ${{ needs.code-cleanup.result == 'success' && '✅ Clean' || '⚠️ Issues found' }} | Formatting and cleanup |
          | Security | ${{ needs.security-audit.result == 'success' && '✅ Secure' || '⚠️ Review needed' }} | Vulnerability scan |
          | Build | ✅ Passing | Compilation test successful |
          
          ## 🔧 Actions Taken
          
          - 📦 Dependency updates: ${{ needs.dependency-updates.result }}
          - 🧹 Code cleanup: ${{ needs.code-cleanup.result }}
          - 🔒 Security audit: ${{ needs.security-audit.result }}
          
          ## 📈 Next Maintenance
          
          Next scheduled maintenance: **Next Monday 2 AM UTC**
          
          ---
          *Generated by automated maintenance workflow*
          EOF
          
          echo "✅ Health report generated"
      
      - name: 📋 Create summary
        run: |
          echo "# 🔧 Maintenance Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: ${{ needs.dependency-updates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Cleanup**: ${{ needs.code-cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Audit**: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⏰ Schedule" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Run**: Weekly on Monday at 2 AM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Manual Trigger**: Available via workflow_dispatch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🤖 Automated maintenance workflow completed successfully!"
