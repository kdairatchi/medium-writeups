name: 🔒 Security Audit & Vulnerability Scan

on:
  # Run security scans on schedule
  schedule:
    - cron: "*/45 * * * *" # Runs every 45 minute temporarily
  # Manual trigger for security audits
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - code-only
          - dependencies-only
      
  # Run on security-related changes
  push:
    branches:
      - main
    paths:
      - '.github/workflows/security-scan.yml'
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'

  pull_request:
    branches:
      - main
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.23.4'

jobs:
  # Code security scanning
  code-security:
    name: 🔍 Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 📦 Download dependencies
        run: |
          if [ ! -f "go.mod" ]; then
            go mod init medium-writeups-aggregator
          fi
          go mod tidy
          go mod download
      
      - name: 🔒 Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
      
      - name: 📤 Upload Gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec.sarif
      
      - name: 🔍 Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      
      - name: 🧪 Static analysis with go vet
        run: go vet ./...
      
      - name: 🔎 Check for hardcoded secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Dependency scanning
  dependency-security:
    name: 🔒 Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 📦 Ensure Go module exists
        run: |
          if [ ! -f "go.mod" ]; then
            go mod init medium-writeups-aggregator
          fi
          go mod tidy
      
      - name: 🔒 Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth
      
      - name: 📊 Generate dependency report
        run: |
          echo "# 🔒 Dependency Security Report" > dependency-report.md
          echo "" >> dependency-report.md
          echo "## 📦 Go Dependencies" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
          go list -m all >> dependency-report.md
          echo "\`\`\`" >> dependency-report.md
          echo "" >> dependency-report.md
          echo "Generated at: $(date -u)" >> dependency-report.md
      
      - name: 📤 Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-report
          path: dependency-report.md

  # License compliance check
  license-compliance:
    name: 📜 License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: 📦 Prepare dependencies
        run: |
          if [ ! -f "go.mod" ]; then
            go mod init medium-writeups-aggregator
          fi
          go mod tidy
      
      - name: 📜 Install go-licenses
        run: go install github.com/google/go-licenses@latest
      
      - name: 🔍 Check license compliance
        run: |
          echo "# 📜 License Compliance Report" > license-report.md
          echo "" >> license-report.md
          echo "## 📋 Third-party Licenses" >> license-report.md
          echo "" >> license-report.md
          
          # Get licenses for all dependencies
          go-licenses csv ./... >> licenses.csv 2>/dev/null || true
          
          if [ -f licenses.csv ]; then
            echo "| Package | License | URL |" >> license-report.md
            echo "|---------|---------|-----|" >> license-report.md
            while IFS=, read -r package license url; do
              echo "| $package | $license | $url |" >> license-report.md
            done < licenses.csv
          else
            echo "No third-party dependencies found or license detection failed." >> license-report.md
          fi
          
          echo "" >> license-report.md
          echo "Generated at: $(date -u)" >> license-report.md
      
      - name: 📤 Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: license-report.md

  # Docker security scan (if Dockerfile exists)
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type != 'code-only'
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔍 Check for Dockerfile
        id: check_docker
        run: |
          if [ -f "Dockerfile" ]; then
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 🔧 Set up Docker Buildx
        if: steps.check_docker.outputs.has_dockerfile == 'true'
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build Docker image
        if: steps.check_docker.outputs.has_dockerfile == 'true'
        run: docker build -t medium-writeups:security-scan .
      
      - name: 🔒 Run Trivy vulnerability scanner
        if: steps.check_docker.outputs.has_dockerfile == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'medium-writeups:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy scan results
        if: steps.check_docker.outputs.has_dockerfile == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # GitHub Actions security
  github-actions-security:
    name: 🔧 GitHub Actions Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔒 Check GitHub Actions with actionlint
        run: |
          # Install actionlint
          bash <(curl https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash)
          
          # Run actionlint on all workflow files
          ./actionlint .github/workflows/*.yml || true
      
      - name: 🔍 Check for workflow security issues
        run: |
          echo "# 🔧 GitHub Actions Security Report" > actions-security-report.md
          echo "" >> actions-security-report.md
          echo "## 🔍 Workflow Files Analysis" >> actions-security-report.md
          echo "" >> actions-security-report.md
          
          # Check for potential security issues
          for file in .github/workflows/*.yml; do
            echo "### $(basename $file)" >> actions-security-report.md
            echo "" >> actions-security-report.md
            
            # Check for pull_request_target usage
            if grep -q "pull_request_target" "$file"; then
              echo "⚠️ **Warning**: Uses \`pull_request_target\` - ensure proper security measures" >> actions-security-report.md
            fi
            
            # Check for script injection vulnerabilities
            if grep -q "\${{.*github\.event\." "$file"; then
              echo "⚠️ **Warning**: Potential script injection vulnerability detected" >> actions-security-report.md
            fi
            
            # Check for overly broad permissions
            if grep -q "permissions:.*write-all" "$file"; then
              echo "⚠️ **Warning**: Uses overly broad permissions" >> actions-security-report.md
            fi
            
            echo "✅ Basic security checks completed" >> actions-security-report.md
            echo "" >> actions-security-report.md
          done
          
          echo "Generated at: $(date -u)" >> actions-security-report.md
      
      - name: 📤 Upload Actions security report
        uses: actions/upload-artifact@v4
        with:
          name: github-actions-security-report
          path: actions-security-report.md

  # Security summary and reporting
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [code-security, dependency-security, license-compliance, github-actions-security]
    if: always()
    
    steps:
      - name: 📋 Checkout repository
        uses: actions/checkout@v4
      
      - name: 📥 Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports
      
      - name: 📊 Generate security summary
        run: |
          echo "# 🔒 Comprehensive Security Report" > SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          echo "## 📋 Executive Summary" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          echo "This report contains the results of automated security scans performed on the Medium Cybersecurity Writeups repository." >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          echo "**Scan Date**: $(date -u)" >> SECURITY-REPORT.md
          echo "**Repository**: ${{ github.repository }}" >> SECURITY-REPORT.md
          echo "**Commit**: ${{ github.sha }}" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          
          echo "## 🔍 Scan Results Overview" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          echo "| Security Area | Status | Notes |" >> SECURITY-REPORT.md
          echo "|---------------|--------|-------|" >> SECURITY-REPORT.md
          echo "| Code Security | ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }} | Static analysis and vulnerability checks |" >> SECURITY-REPORT.md
          echo "| Dependencies | ${{ needs.dependency-security.result == 'success' && '✅ Passed' || '❌ Failed' }} | Third-party dependency security |" >> SECURITY-REPORT.md
          echo "| License Compliance | ${{ needs.license-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} | Open source license compliance |" >> SECURITY-REPORT.md
          echo "| GitHub Actions | ${{ needs.github-actions-security.result == 'success' && '✅ Passed' || '❌ Failed' }} | Workflow security analysis |" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          
          echo "## 🛡️ Security Recommendations" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          echo "### General Recommendations" >> SECURITY-REPORT.md
          echo "- ✅ Keep dependencies up to date" >> SECURITY-REPORT.md
          echo "- ✅ Regular security scans (automated)" >> SECURITY-REPORT.md
          echo "- ✅ Use GitHub security features (Dependabot, CodeQL)" >> SECURITY-REPORT.md
          echo "- ✅ Follow security best practices for Go development" >> SECURITY-REPORT.md
          echo "- ✅ Monitor for new vulnerabilities in RSS feed handling" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          
          echo "### Medium RSS Aggregator Specific" >> SECURITY-REPORT.md
          echo "- 🔒 Validate and sanitize all RSS feed content" >> SECURITY-REPORT.md
          echo "- 🔒 Implement rate limiting to prevent abuse" >> SECURITY-REPORT.md
          echo "- 🔒 Use secure HTTP clients with timeouts" >> SECURITY-REPORT.md
          echo "- 🔒 Sanitize HTML output to prevent XSS" >> SECURITY-REPORT.md
          echo "- 🔒 Validate URLs before processing feeds" >> SECURITY-REPORT.md
          echo "" >> SECURITY-REPORT.md
          
          # Append individual reports if they exist
          if [ -d "security-reports" ]; then
            for report_dir in security-reports/*/; do
              if [ -d "$report_dir" ]; then
                echo "## 📄 $(basename "$report_dir") Details" >> SECURITY-REPORT.md
                echo "" >> SECURITY-REPORT.md
                for report_file in "$report_dir"/*.md; do
                  if [ -f "$report_file" ]; then
                    cat "$report_file" >> SECURITY-REPORT.md
                    echo "" >> SECURITY-REPORT.md
                  fi
                done
              fi
            done
          fi
          
          echo "---" >> SECURITY-REPORT.md
          echo "*This report was automatically generated by GitHub Actions*" >> SECURITY-REPORT.md
      
      - name: 📤 Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: SECURITY-REPORT.md
      
      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('SECURITY-REPORT.md')) {
              const report = fs.readFileSync('SECURITY-REPORT.md', 'utf8');
              const summary = report.substring(0, 2000) + (report.length > 2000 ? '\n\n*Report truncated. Download full report from artifacts.*' : '');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## 🔒 Security Scan Results\n\n' + summary
              });
            }
      
      - name: 📋 Create security summary for step
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Security**: ${{ needs.code-security.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: ${{ needs.dependency-security.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **License Compliance**: ${{ needs.license-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Actions**: ${{ needs.github-actions-security.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 **Full Report**: Check the 'comprehensive-security-report' artifact" >> $GITHUB_STEP_SUMMARY
